import { NavigationItem } from '../types/index.js';
import { BaseRouter, PageDefinition, ProjectReflection, Reflection, ReflectionKind } from 'typedoc';
export declare abstract class MarkdownRouter extends BaseRouter {
    extension: string;
    outputFileStrategy: "members" | "modules";
    entryModule: string;
    ignoreScopes: boolean;
    modulesFileName: string;
    entryFileName: string;
    isPackages: boolean;
    membersWithOwnFile: ("Variable" | "Function" | "Class" | "Interface" | "Enum" | "TypeAlias")[];
    mergeReadme: boolean;
    useHTMLAnchors: boolean;
    enumMembersFormat: "table" | "list" | "htmlTable";
    entryUrl: string;
    readmeURL: string;
    navigation: NavigationItem[];
    directories: Map<ReflectionKind, string>;
    labels: Map<ReflectionKind, string>;
    kindsToString: Map<ReflectionKind, string>;
    protected abstract getIdealBaseNameVerbose(reflection: Reflection): string;
    buildPages(project: ProjectReflection): PageDefinition<import("typedoc").RouterTarget>[];
    parseChildPages(project: ProjectReflection, pages: PageDefinition[]): void;
    getIdealBaseName(reflection: Reflection): string;
    getIdealBaseNameFlattened(reflection: Reflection): string;
    getReflectionAlias(reflection: Reflection): string;
    getModulesFileName(reflection: Reflection): string;
    getPackageEntryModule(reflection: Reflection): Reflection | undefined;
    getPackageEntryFileName(reflection: Reflection): string | undefined;
    getPackageLink(reflection: Reflection): string;
    getMarkdownFileName(baseName: string, allowDuplicate?: boolean): string;
}
